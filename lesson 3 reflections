When would you want to use a remote repository rather than keeping all your work local?
For security - its useful to have a cloud backup
If there are several people working on a project
If you want to ask other people's advice

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You might not want to include everyones input into your version yet
If you're experimenting and you might want to step back to a previous version (although there are other ways to do this)

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Use forks to keep the original fixed, or when you don't have permission to change the fork
Use clones to make new copies, either from the hub onto your local machine or on your local machine
Use branches to work within one repository so that you can make experimental changes or when more than one person is working on the same set of code.  We havent seen branching on the hub itself yet?

NOTES:
git push origin master PUSHES THE CURRENT REMOTE VERSION TO THE SERVER

When you pull a repo from the hub, you get a version of the master called origin/master (assuming your hub version is origin).
git fetch [origin] - use this when your local version and the version on GIT HUB have BOTH been updated - it will create a new branch on your local version that shows what's changed.  Then you can use git diff etc to work out what's changed.

git pull origin master IS THE SAME AS git fetch origin THEN git merge master origin/master

FAST FORWARD merges: if the thing you're merging is an ancester of the thing you're merging into, you don't need to create a new commit, you just need to move the label forward... all the info you need is already there in the commit history.  This is a fast-forward merge which by definition cant create a conflict.

What is the benefit of having a copy of the last known state of the remote stored locally?
That's your reference copy.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
You could set up an FTP system to hold the current version but sorting out who'd changed what would be a nightmare.
You could do all your changes on line and insist that everyone comments on stuff (yeah right!) and set up a set of agreed terms that people could search for to make searching easier.  But who'd remember to stick to the rules?
On the other hand there's a lot of faff in GIT.  It might be easier to just do stuff.





